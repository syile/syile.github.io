{"meta":{"title":"さくら荘その","subtitle":"","description":"","author":"syile","url":"https://syile.github.io","root":"/"},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"https://syile.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"about/index.html","permalink":"https://syile.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"https://syile.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"https://syile.github.io/donate/index.html","excerpt":"","text":""},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://syile.github.io/bangumi/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"https://syile.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"links","date":"2022-07-05T01:11:06.000Z","updated":"2022-08-24T10:10:23.593Z","comments":true,"path":"links/index.html","permalink":"https://syile.github.io/links/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"music/index.html","permalink":"https://syile.github.io/music/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"https://syile.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"https://syile.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-07-17T08:57:40.000Z","updated":"2022-07-17T08:58:15.018Z","comments":true,"path":"tags/index.html","permalink":"https://syile.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://syile.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"}],"posts":[{"title":"C++判断回文数","slug":"C++判断回文数","date":"2023-07-10T03:41:45.000Z","updated":"2025-09-08T14:02:29.585Z","comments":true,"path":"2023/07/10/C++判断回文数/","link":"","permalink":"https://syile.github.io/2023/07/10/C++%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E6%95%B0/","excerpt":"","text":"方法一思路 将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 不过反转后可能会出现溢出，不过如果出现溢出的情况，则该数一定不是回文数。回文数反转以后一定是它本身，所以一定不会溢出。 算法 如果该数小于0，则一定不是回文数，返回false 该数大于0时，设反转后的数reverse&#x3D;0，再通过对原数值求模、取余等操作，计算出反转后的数 reverse如果等于原数值，返回true，否则返回false。 核心算法代码 bool isPalindrome(int x) &#123; if (x < 0) &#123; return false; &#125; long reverse = 0; int num = x; while (num > reverse) &#123; reverse = reverse * 10 + num % 10; num /= 10; &#125; return x == reverse; &#125; 算法复杂度分析 时间复杂度：O(log n)，对于每次迭代，我们会将输入除以 10，因此时间复杂度为 O(log n)。 空间复杂度：O(1)。我们只需要常数空间存放若干变量。 方法二思路 将整数转为字符串 ，然后循环字符串数组的一半长度进行判断对应元素是否相等即可。 该方法有两种实现方式： 在原字符串上进行对称比较 赋值给新字符串，将新字符串翻转，对比新旧字符串是否一致 核心算法代码实现方式1—-在原字符串上进行对称比较 bool isPalindrome(int x) &#123; if (x < 0) &#123; return false; &#125; string res = to_string(x); //to_string()--将整型转换为字符串型 for(int i=0; i < res.size()/2; i++) &#123; //获取字符串长度--size() if (res[i] == res[res.size()-1-i]) continue; else return false; &#125; return true; &#125; 实现方式2—-赋值给新字符串，将新字符串翻转，对比新旧字符串是否一致 bool isPalindrome(int x) &#123; if (x < 0) &#123; return false; &#125; string temp = to_string(x); string res = temp; //reverse()--反转字符串 reverse(res.begin(), res.end()); //begin()--获取字符串首元素 return (!res.compare(temp)); //end()--获取字符串的末元素 &#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://syile.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syile.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"算法","slug":"算法","permalink":"https://syile.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"合并两个有序链表","slug":"合并两个有序链表","date":"2023-07-10T03:41:14.000Z","updated":"2025-09-08T14:02:24.526Z","comments":true,"path":"2023/07/10/合并两个有序链表/","link":"","permalink":"https://syile.github.io/2023/07/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","excerpt":"","text":"题目描述 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 链表结构体定义； struct ListNode &#123; int val; ListNode *next; ListNode() : val(0), next(nullptr) &#123;&#125; ListNode(int x) : val(x), next(nullptr) &#123;&#125; ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; &#125;; 思路 用迭代的方法来实现上述算法。当 l1 和 l2 都不是空链表时，判断 l1 和 l2 哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点向后移一位。 算法 首先，设定一个哨兵节点 prehead ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 prev 指针，我们需要做的是调整它的 next 指针 重复以下过程，直到 l1 或者 l2 指向了 null ：如果 l1 当前节点的值小于等于 l2 ，我们就把 l1 当前的节点接在 prev 节点的后面同时将 l1 指针往后移一位。否则，我们对 l2 做同样的操作。不管我们将哪一个元素接在了后面，我们都需要把 prev 向后移一位。 在循环终止的时候， l1 和 l2 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表即可。 下图展示了 1-&gt;4-&gt;5 和 1-&gt;2-&gt;3-&gt;6 两个链表迭代合并的过程： 算法代码 ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; ListNode* preHead = new ListNode(-1); ListNode* prev = preHead; while (l1 != nullptr && l2 != nullptr) &#123; if (l1->val < l2->val) &#123; prev->next = l1; l1 = l1->next; &#125; else &#123; prev->next = l2; l2 = l2->next; &#125; prev = prev->next; &#125; // 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可 prev->next = l1 == nullptr ? l2 : l1; return preHead->next; &#125; 算法复杂度分析 时间复杂度：O(n + m)，其中 n 和 m 分别为两个链表的长度。因为每次循环迭代中，l1 和 l2 只有一个元素会被放进合并链表中， 因此 while 循环的次数不会超过两个链表的长度之和。所有其他操作的时间复杂度都是常数级别的，因此总的时间复杂度为 O(n+m)。 空间复杂度：O(1)。我们只需要常数的空间存放若干变量","categories":[{"name":"技术","slug":"技术","permalink":"https://syile.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syile.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"数据结构","slug":"数据结构","permalink":"https://syile.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Linux进程互斥—临界资源访问","slug":"Linux进程互斥—临界资源访问","date":"2023-07-10T03:40:14.000Z","updated":"2025-09-07T12:36:52.857Z","comments":true,"path":"2023/07/10/Linux进程互斥—临界资源访问/","link":"","permalink":"https://syile.github.io/2023/07/10/Linux%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E2%80%94%E4%B8%B4%E7%95%8C%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE/","excerpt":"","text":"模拟临界资源访问的示例程序 本示例的临界资源是一个建立在共享存储区的栈，由服务进程建立并初始化。初始状态下共享栈满，里面顺序放置一系列正整数（自栈顶向下：1,2,3…），代表空闲块号。客户进程利用共享栈进行数据块的分配和释放，以得到、归还一个块号代表，并不进行任何后续操作。程序中getblock过程从共享栈中弹出一个块号（分配），relblock过程把一个已分配块号压入共享栈（释放）。为简单起见，已分配块号在本地也使用栈结构保存，因而每次释放的是最后分配的块号。 编译后执行，第一个进程实例将作为服务进程，提示： NO OTHER OPERATION but press Ctrl+C or use kill to end.服务进程完成初始化后将进入睡眠状态，直到用户按Ctrl+C终止执行，或使用kill命令杀死服务进程。 其他进程实例作为客户进程，进入后首先有命令帮助提示，然后显示命令提示符“?&gt; ”，在命令提示下可以使用的命令包括： help 显示可用命令 list 列出所有已分配块号 get 分配一个新块 rel 释放最后分配块号 end 退出程序 示例程序代码#include &lt;sys/types.h> #include &lt;unistd.h> #include &lt;signal.h> #include &lt;stdio.h> #include &lt;string.h> #include &lt;sys/ipc.h> #include &lt;sys/shm.h> #define MY_SHMKEY 10071800 // need to change #define MAX_BLOCK 1024 #define MAX_CMD 8 struct shmbuf &amp;#123; int top; int stack[MAX_BLOCK]; &amp;#125; *shmptr, local; char cmdbuf[MAX_CMD]; int shmid, semid; void sigend(int); void relblock(void); int getblock(void); void showhelp(void); void showlist(void); void getcmdline(void); int main(void) &amp;#123; if((shmid=shmget(MY_SHMKEY, sizeof(struct shmbuf), IPC_CREAT|IPC_EXCL|0666)) &lt; 0) &amp;#123; /* shared memory exists, act as client */ shmid=shmget(MY_SHMKEY, sizeof(struct shmbuf), 0666); shmptr=(struct shmbuf *)shmat(shmid, 0, 0); local.top=-1; showhelp(); getcmdline(); while(strcmp(cmdbuf,\"end\\n\")) &amp;#123; if(!strcmp(cmdbuf,\"get\\n\")) getblock(); else if(!strcmp(cmdbuf,\"rel\\n\")) relblock(); else if(!strcmp(cmdbuf,\"list\\n\")) showlist(); else if(!strcmp(cmdbuf,\"help\\n\")) showhelp(); getcmdline(); &amp;#125; &amp;#125; else /* acts as server */ &amp;#123; int i; shmptr=(struct shmbuf *)shmat(shmid, 0, 0); signal(SIGINT, sigend); signal(SIGTERM, sigend); printf(\"NO OTHER OPERATION but press Ctrl+C or use kill to end.\\n\"); shmptr->top=MAX_BLOCK-1; for(i=0; i&lt;MAX_BLOCK; i++) shmptr->stack[i]=MAX_BLOCK-i; sleep(1000000); /* cause sleep forever. */ &amp;#125; &amp;#125; void sigend(int sig) &amp;#123; shmctl(shmid, IPC_RMID, 0); semctl(semid, IPC_RMID, 0); exit(0); &amp;#125; void relblock(void) &amp;#123; if(local.top&lt;0) &amp;#123; printf(\"No block to release!\"); return; &amp;#125; shmptr->top++; shmptr->stack[shmptr->top]=local.stack[local.top--]; &amp;#125; int getblock(void) &amp;#123; if(shmptr->top&lt;0) &amp;#123; printf(\"No free block to get!\"); return; &amp;#125; local.stack[++local.top]=shmptr->stack[shmptr->top]; shmptr->top--; &amp;#125; void showhelp(void) &amp;#123; printf(\"\\navailable COMMAND:\\n\\n\"); printf(\"help\\tlist this help\\n\"); printf(\"list\\tlist all gotten block number\\n\"); printf(\"get\\tget a new block\\n\"); printf(\"rel\\trelease the last gotten block\\n\"); printf(\"end\\texit this program\\n\"); &amp;#125; void showlist(void) &amp;#123; int i; printf(\"List all gotten block number:\\n\"); for(i=0; i&lt;=local.top; i++) printf(\"%d\\t\", local.stack[i]); &amp;#125; void getcmdline(void) &amp;#123; printf(\"\\n?> \"); fgets(cmdbuf, MAX_CMD-1, stdin); &amp;#125; 运行结果 结果分析：运行程序，第一个进程实例作为服务进程，第二个进程实例作为客户进程，然后可以在命令提示符下输入命令，分配或释放一个新块，列出已分配的块等，并未发现程序出错的情况。（程序其实是存在错误的） 改造程序，使错误易于观察为了使错误易于观察，改进分配和释放数据块的函数relblock(void)和 getblock(void) 代码如下void relblock(void) &amp;#123; if(local.top&lt;0) &amp;#123; printf(\"No block to release!\"); return; &amp;#125; shmptr->top++; sleep(10); shmptr->stack[shmptr->top]=local.stack[local.top--]; &amp;#125; void getblock(void) &amp;#123; if(shmptr->top&lt;0) &amp;#123; printf(\"No free block to get!\"); return; &amp;#125; local.stack[++local.top]=shmptr->stack[shmptr->top]; sleep(10); shmptr->top--; &amp;#125; 运行结果结果分析可以看到，两个客户进程都申请数据块时，两个进程都得到数据块1，而一个数据块只能分配给一个进程，而使得数据块2丢失 利用信号量机制实现进程互斥功能利用信号量sign来实现同时执行getblock()，即申请数据块。或者先执行relblock()再执行getblock() ，即先释放数据块再申请数据块。 为了方便实现，在上一个代码基础上，在结构shmbuf的定义中添加了信号量sign的定义。之后在代码中进行pv操作。 示例代码#include &lt;sys/types.h> #include &lt;unistd.h> #include &lt;signal.h> #include &lt;stdio.h> #include &lt;string.h> #include &lt;sys/ipc.h> #include &lt;sys/shm.h> #define MY_SHMKEY 10071800 // need to change #define MAX_BLOCK 1024 #define MAX_CMD 8 //共享存储区的栈结构 //为简单起见，已分配块号在本地也使用栈结构local保存 struct shmbuf &amp;#123; int top; int stack[MAX_BLOCK]; int sign; &amp;#125; *shmptr, local; // char cmdbuf[MAX_CMD]; int shmid, semid; void sigend(int); void relblock(void);//释放最后分配块号 void getblock(void);//分配一个新块 void showhelp(void);//显示可用命令 void showlist(void);//列出所有已分配块号 void getcmdline(void);//接受输入命令 int main(void) &amp;#123; //建立一个共享存储区 if((shmid=shmget(MY_SHMKEY, sizeof(struct shmbuf), IPC_CREAT|IPC_EXCL|0666)) &lt; 0) &amp;#123; //获得共享存储区首地址 shmid=shmget(MY_SHMKEY, sizeof(struct shmbuf), 0666); //把一个共享存储区附接到进程内存空间； shmptr=(struct shmbuf *)shmat(shmid, 0, 0); //初始化 local.top=-1; //输出命令提示 showhelp(); //接受输入命令 getcmdline(); while(strcmp(cmdbuf,\"end\\n\")) &amp;#123; if(!strcmp(cmdbuf,\"get\\n\")) &amp;#123; while(shmptr->sign==0); shmptr->sign=0; getblock(); shmptr->sign=1; &amp;#125; else if(!strcmp(cmdbuf,\"rel\\n\")) &amp;#123; while(shmptr->sign==0); shmptr->sign=0; relblock(); shmptr->sign=1; &amp;#125; else if(!strcmp(cmdbuf,\"list\\n\")) showlist(); else if(!strcmp(cmdbuf,\"help\\n\")) showhelp(); //接受输入命令 getcmdline(); &amp;#125; &amp;#125; else &amp;#123; int i; //把一个共享存储区附接到进程内存空间； shmptr=(struct shmbuf *)shmat(shmid, 0, 0); shmptr->sign=1; //设置对信号的处理方式或处理过程 signal(SIGINT, sigend); signal(SIGTERM, sigend); printf(\"NO OTHER OPERATION but press Ctrl+C or use kill to end.\\n\"); //初始状态下共享栈满，里面顺序放置一系列正整数（自栈顶向下：,2,3...）， //代表空闲块号 shmptr->top=MAX_BLOCK-1;//shmptr->top值越大，可利用物理块就越多 for(i=0; i&lt;MAX_BLOCK; i++) shmptr->stack[i]=MAX_BLOCK-i; sleep(1000000); &amp;#125; &amp;#125; void sigend(int sig) &amp;#123; shmctl(shmid, IPC_RMID, 0); semctl(semid, IPC_RMID, 0); exit(0); &amp;#125; void relblock(void) &amp;#123; if(local.top&lt;0) &amp;#123; printf(\"No block to release!\"); return; &amp;#125; shmptr->top++; sleep(10);//便于观察错误 shmptr->stack[shmptr->top]=local.stack[local.top--]; &amp;#125; void getblock(void) &amp;#123; if(shmptr->top&lt;0) &amp;#123; printf(\"No free block to get!\"); return; &amp;#125; local.stack[++local.top]=shmptr->stack[shmptr->top]; sleep(10);//便于观察错误 shmptr->top--; &amp;#125; //显示可用命令 void showhelp(void) &amp;#123; printf(\"\\navailable COMMAND:\\n\\n\"); printf(\"help\\tlist this help\\n\"); printf(\"list\\tlist all gotten block number\\n\"); printf(\"get\\tget a new block\\n\"); printf(\"rel\\trelease the last gotten block\\n\"); printf(\"end\\texit this program\\n\"); &amp;#125; //列出所有已分配块号 void showlist(void) &amp;#123; int i; printf(\"List all gotten block number:\\n\"); for(i=0; i&lt;=local.top;i++) printf(\"%d\\t\",local.stack[i]); &amp;#125; //接受输入命令 void getcmdline(void) &amp;#123; printf(\"\\n?> \"); fgets(cmdbuf, MAX_CMD-1, stdin); &amp;#125; 运行结果结果分析增加了信号量机制后，可以看到两个客户进程同时申请数据块并不会出错，也没有造成数据块丢失。即通过信号量机制，实现了两个客户进程之间的互斥","categories":[{"name":"技术","slug":"技术","permalink":"https://syile.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]},{"title":"等差数列划分","slug":"等差数列划分","date":"2022-08-15T03:44:45.000Z","updated":"2025-09-07T12:36:51.942Z","comments":true,"path":"2022/08/15/等差数列划分/","link":"","permalink":"https://syile.github.io/2022/08/15/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86/","excerpt":"","text":"题目描述 如果一个数列 至少有三个元素 ，并且任意两个相邻元素之差相同，则称该数列为等差数列。 例如，[1,3,5,7,9]、[7,7,7,7] 和 [3,-1,-5,-9] 都是等差数列。 给你一个整数数组 nums ，返回数组 nums 中所有为等差数组的 子数组 个数。子数组 是数组中的一个连续序列。 算法思路 首先遍历原数组 nums，用数组 diffs 存储相邻两个元素之间的差值。 然后遍历 diffs，用数组 cons 存储其中连续相同的差值的数目，比如有 33 个 33 连在一起，意味着原数组中这个位置存在一个最大长度为 44 的等差数列。 然后遍历 cons，对于长度为 n 的等差数列，其所有的长度大于等于 33 的子数列都是等差数列，则一共有 (n-2)(n-1)&#x2F;2 个等差数列。 全部相加得到结果 比如： nums &#x3D; [1,2,3,4,5,6,12,14,16] diffs &#x3D; [1,1,1,1,1,6,2,2] cons &#x3D; [5,1,2] result &#x3D; (6-2)(6-1)&#x2F;2 + (3-2)(3-1)&#x2F;2 （将 1 舍去，nums 中有长度为 5+1 和 2+1 的等差数列） 算法代码 int numberOfArithmeticSlices(vector& nums) &#123; int ans=0; int size=nums.size(); if(size","categories":[{"name":"技术","slug":"技术","permalink":"https://syile.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syile.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"算法","slug":"算法","permalink":"https://syile.github.io/tags/%E7%AE%97%E6%B3%95/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"https://syile.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syile.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"算法","slug":"算法","permalink":"https://syile.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://syile.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}